Index: lib/pages/tracking_page/track_map_custom_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/tracking_page/track_map_custom_widget.dart b/lib/pages/tracking_page/track_map_custom_widget.dart
new file mode 100644
--- /dev/null	(date 1702588983160)
+++ b/lib/pages/tracking_page/track_map_custom_widget.dart	(date 1702588983160)
@@ -0,0 +1,383 @@
+// Automatic FlutterFlow imports
+import 'dart:math';
+
+import '/backend/schema/structs/index.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/custom_functions.dart'; // Imports custom functions
+import 'package:flutter/material.dart';
+
+// Begin custom widget code
+// DO NOT REMOVE OR MODIFY THE CODE ABOVE!
+
+import 'package:geolocator/geolocator.dart';
+import 'package:google_maps_flutter/google_maps_flutter.dart' as lats;
+import 'package:geolocator_apple/geolocator_apple.dart';
+import 'package:geolocator_android/geolocator_android.dart';
+import 'package:flutter/foundation.dart';
+import 'dart:ui' as ui;
+import 'package:flutter/services.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:google_maps_flutter/google_maps_flutter.dart';
+import 'dart:async';
+import '/flutter_flow/lat_lng.dart' as tras;
+
+class TrackMapCustomWidget extends StatefulWidget {
+  const TrackMapCustomWidget({
+    Key? key,
+    this.width,
+    this.height,
+    required this.locationRequstedAction,
+    required this.startTrip,
+    required this.stopTrip,
+    required this.travilLise,
+  }) : super(key: key);
+
+  final double? width;
+  final double? height;
+  final Future<dynamic> Function() locationRequstedAction;
+  final Future<dynamic> Function() startTrip;
+  final Future<dynamic> Function() stopTrip;
+  final Future<dynamic> Function() travilLise;
+
+  @override
+  _MapCustomWidgetState createState() => _MapCustomWidgetState();
+}
+
+class _MapCustomWidgetState extends State<TrackMapCustomWidget> {
+  late GoogleMapController mapController;
+  bool isLocationEnabled = false;
+  bool isTrackToBeginEnabled = false;
+  late StreamSubscription<Position> positionStream;
+  late Set<Marker> markers;
+
+  late Position position = Position(
+      longitude: 35.857670,
+      latitude: 31.959345,
+      timestamp: DateTime.now(),
+      altitudeAccuracy: 100,
+      accuracy: 100,
+      altitude: 0,
+      heading: 0,
+      headingAccuracy: 100,
+      speed: 100,
+      speedAccuracy: 100);
+
+  BitmapDescriptor markerIcon = BitmapDescriptor.defaultMarker;
+  late LocationSettings locationSettings;
+
+  @override
+  void initState() {
+    super.initState();
+    markers = <Marker>{};
+    SchedulerBinding.instance.addPostFrameCallback((_) async {
+      _determinePosition();
+    });
+  }
+
+  Future<Position> _determinePosition() async {
+    bool serviceEnabled;
+    LocationPermission permission;
+
+    // Test if location services are enabled.
+    serviceEnabled = await Geolocator.isLocationServiceEnabled();
+    if (!serviceEnabled) {
+      // Location services are not enabled don't continue
+      // accessing the position and request users of the
+      // App to enable the location services.
+      return Future.error('Location services are disabled.');
+    }
+
+    permission = await Geolocator.checkPermission();
+    if (permission == LocationPermission.denied) {
+      permission = await Geolocator.requestPermission();
+      if (permission == LocationPermission.denied) {
+        // Permissions are denied, next time you could try
+        // requesting permissions again (this is also where
+        // Android's shouldShowRequestPermissionRationale
+        // returned true. According to Android guidelines
+        // your App should show an explanatory UI now.
+        return Future.error('Location permissions are denied');
+      }
+    }
+
+    if (permission == LocationPermission.deniedForever) {
+      // Permissions are denied forever, handle appropriately.
+      return Future.error(
+          'Location permissions are permanently denied, we cannot request permissions.');
+    }
+
+    // When we reach here, permissions are granted and we can
+    // continue accessing the position of the device.
+    return await Geolocator.getCurrentPosition();
+  }
+
+  double calculateDistance(double lat1, double lng1, double lat2, double lng2) {
+    const earthRadius = 6371.0; // Radius of the Earth in kilometers
+
+    // Convert degrees to radians
+    double toRadians(double degree) {
+      return degree * pi / 180.0;
+    }
+
+    // Haversine formula
+    num haversine(double theta) {
+      return pow(sin(theta / 2), 2);
+    }
+
+    double deltaLat = toRadians(lat2 - lat1);
+    double deltaLng = toRadians(lng2 - lng1);
+
+    double a = haversine(deltaLat) +
+        cos(toRadians(lat1)) * cos(toRadians(lat2)) * haversine(deltaLng);
+
+    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
+
+    // Calculate the distance
+    double distance = earthRadius * c;
+
+    return distance;
+  }
+
+  bool isWithinRadius(
+      double myLat, double myLng, double lat, double lng, double radius) {
+    double distance = calculateDistance(myLat, myLng, lat, lng);
+
+    return distance <= radius;
+  }
+
+  Future<Uint8List?> getBytesFromAsset(String path, int width) async {
+    ByteData data = await rootBundle.load(path);
+    ui.Codec codec = await ui.instantiateImageCodec(data.buffer.asUint8List(),
+        targetWidth: width);
+    ui.FrameInfo fi = await codec.getNextFrame();
+    return (await fi.image.toByteData(format: ui.ImageByteFormat.png))
+        ?.buffer
+        .asUint8List();
+  }
+
+  Future<BitmapDescriptor> getBitmapDescriptorFromAssetBytes(
+      String path, int width) async {
+    final Uint8List? imageData = await getBytesFromAsset(path, width);
+    return BitmapDescriptor.fromBytes(imageData!);
+  }
+
+  void addCustomIcon() async {
+    await getBitmapDescriptorFromAssetBytes("assets/images/bus_5.png", 100)
+        .then((icon) {
+      setState(() {
+        markerIcon = icon;
+        dynamic line = FFAppState().travilLine;
+        for (var setting in line['way_points']) {
+          markers.add(Marker(
+            markerId: MarkerId(setting['label']),
+            position: lats.LatLng(setting['lat'], setting['lng']),
+            draggable: false,
+            icon: BitmapDescriptor.defaultMarkerWithHue(
+                BitmapDescriptor.hueGreen),
+          ));
+        }
+      });
+    });
+  }
+
+  void getLocationApi() {
+    if (defaultTargetPlatform == TargetPlatform.android) {
+      locationSettings = AndroidSettings(
+          accuracy: LocationAccuracy.best,
+          distanceFilter: 1,
+          forceLocationManager: true,
+          intervalDuration: const Duration(seconds: 0),
+          foregroundNotificationConfig: const ForegroundNotificationConfig(
+            notificationText: "Bus Location Is collected",
+            notificationTitle: "Trackllo",
+            enableWakeLock: true,
+          ));
+    } else if (defaultTargetPlatform == TargetPlatform.iOS ||
+        defaultTargetPlatform == TargetPlatform.macOS) {
+      locationSettings = AppleSettings(
+        accuracy: LocationAccuracy.best,
+        activityType: ActivityType.fitness,
+        distanceFilter: 1,
+        pauseLocationUpdatesAutomatically: true,
+        showBackgroundLocationIndicator: false,
+      );
+    } else {
+      locationSettings = const LocationSettings(
+        accuracy: LocationAccuracy.best,
+        distanceFilter: 1,
+      );
+    }
+    positionStream =
+        Geolocator.getPositionStream(locationSettings: locationSettings)
+            .listen((Position? position) {
+      setState(() {
+        if (isWithinRadius(
+            markers.last.position.latitude,
+            markers.last.position.longitude,
+            position?.latitude ?? 0.0,
+            position?.longitude ?? 0.0,
+            2.0)) {
+          FFAppState().UseTrackToBiginApiAppState = true;
+        } else if (isWithinRadius(
+            markers.first.position.latitude,
+            markers.first.position.longitude,
+            position?.latitude ?? 0.0,
+            position?.longitude ?? 0.0,
+            2.0)) {
+          FFAppState().UseTrackToBiginApiAppState = false;
+        }
+        this.position = position ??
+            Position(
+                longitude: 35.857670,
+                latitude: 31.959345,
+                timestamp: DateTime.now(),
+                accuracy: 100,
+                altitudeAccuracy: 1,
+                altitude: 0,
+                heading: 0,
+                headingAccuracy: 100,
+                speed: 100,
+                speedAccuracy: 100);
+        mapController.moveCamera(CameraUpdate.newLatLng(lats.LatLng(
+            position?.latitude ?? 0.0, position?.longitude ?? 0.0)));
+        FFAppState().locationAppState = LocationModelStruct(
+            lat: position?.latitude ?? 0.0, lng: position?.longitude ?? 0.0);
+        LocationModelStruct loc = FFAppState().locationAppState;
+        markers.add(Marker(
+          markerId: const MarkerId("marker1"),
+          position: lats.LatLng(loc.lat, loc.lng),
+          draggable: false,
+          icon: markerIcon,
+        ));
+        widget.locationRequstedAction.call();
+      });
+    });
+  }
+
+  void clickAction() {
+    getLocationApi();
+    addCustomIcon();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return Container(
+        child: Stack(children: [
+      GoogleMap(
+        zoomControlsEnabled: false,
+        myLocationEnabled: false,
+        myLocationButtonEnabled: false,
+        onMapCreated: (GoogleMapController controller) {
+          mapController = controller;
+        },
+        markers: markers,
+        initialCameraPosition: CameraPosition(
+          target: lats.LatLng(position.latitude, position.longitude),
+          zoom: 14.4746,
+        ),
+      ),
+      Column(
+        mainAxisSize: MainAxisSize.max,
+        mainAxisAlignment: MainAxisAlignment.spaceBetween,
+        children: [
+          Column(
+            mainAxisSize: MainAxisSize.max,
+            children: [
+              Padding(
+                padding:
+                    const EdgeInsetsDirectional.fromSTEB(10.0, 0.0, 10.0, 0.0),
+                child: Row(
+                  mainAxisSize: MainAxisSize.max,
+                  mainAxisAlignment: MainAxisAlignment.start,
+                  children: [
+                    Container(
+                      width: 45.0,
+                      height: 45.0,
+                      decoration: const BoxDecoration(
+                        color: Color(0xffffffff),
+                        shape: BoxShape.circle,
+                      ),
+                      child: const InkWell(
+                        splashColor: Colors.transparent,
+                        focusColor: Colors.transparent,
+                        hoverColor: Colors.transparent,
+                        highlightColor: Colors.transparent,
+                        child: Icon(
+                          Icons.reorder_sharp,
+                          color: Colors.transparent,
+                          size: 30.0,
+                        ),
+                      ),
+                    ),
+                    Text(FFAppState().UseTrackToBiginApiAppState == true
+                        ? 'خارج نطاق سير الرحلة'
+                        : 'داخل نطاق سير الرحلة',style: const TextStyle(color: Colors.black87),)
+                  ],
+                ),
+              ),
+              Padding(
+                padding:
+                    const EdgeInsetsDirectional.fromSTEB(10.0, 15.0, 10.0, 0.0),
+                child: Row(
+                  mainAxisSize: MainAxisSize.max,
+                  mainAxisAlignment: MainAxisAlignment.start,
+                  children: [
+                    Container(
+                      width: 45.0,
+                      height: 45.0,
+                      decoration: BoxDecoration(
+                        color: isLocationEnabled
+                            ? FlutterFlowTheme.of(context).error
+                            : FlutterFlowTheme.of(context).alternate,
+                        shape: BoxShape.circle,
+                      ),
+                      child: InkWell(
+                        splashColor: Colors.transparent,
+                        focusColor: Colors.transparent,
+                        hoverColor: Colors.transparent,
+                        highlightColor: Colors.transparent,
+                        child: Icon(
+                          Icons.power_settings_new,
+                          color: isLocationEnabled
+                              ? FlutterFlowTheme.of(context).info
+                              : FlutterFlowTheme.of(context).primaryText,
+                          size: 30.0,
+                        ),
+                        onTap: () {
+                          if (!FFAppState().UseTrackToBiginApiAppState) {
+                            if (FFAppState().travilLine != null) {
+                              trackLocation();
+                            } else {
+                              widget.travilLise.call();
+                            }
+                          } else {
+                            trackLocation();
+                          }
+                        },
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+            ],
+          ),
+        ],
+      ),
+    ]));
+  }
+
+  void trackLocation() {
+    if (!isLocationEnabled) {
+      clickAction();
+      positionStream.resume();
+      isLocationEnabled = true;
+      widget.startTrip.call();
+    } else {
+      positionStream.cancel();
+      isLocationEnabled = false;
+      widget.stopTrip.call();
+    }
+    setState(() {});
+  }
+}
Index: lib/pages/tracking_page/tracking_page_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import '/backend/api_requests/api_calls.dart';\nimport '/flutter_flow/flutter_flow_google_map.dart';\nimport '/flutter_flow/flutter_flow_theme.dart';\nimport '/flutter_flow/flutter_flow_util.dart';\nimport '/flutter_flow/flutter_flow_widgets.dart';\nimport '/pages/side_menu_component/side_menu_component_widget.dart';\nimport '/pages/travel_list_component/travel_list_component_widget.dart';\nimport '/custom_code/widgets/index.dart' as custom_widgets;\nimport '/flutter_flow/custom_functions.dart' as functions;\nimport 'package:aligned_dialog/aligned_dialog.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:provider/provider.dart';\nimport 'tracking_page_model.dart';\nexport 'tracking_page_model.dart';\n\nclass TrackingPageWidget extends StatefulWidget {\n  const TrackingPageWidget({super.key});\n\n  @override\n  _TrackingPageWidgetState createState() => _TrackingPageWidgetState();\n}\n\nclass _TrackingPageWidgetState extends State<TrackingPageWidget> {\n  late TrackingPageModel _model;\n\n  final scaffoldKey = GlobalKey<ScaffoldState>();\n\n  @override\n  void initState() {\n    super.initState();\n    _model = createModel(context, () => TrackingPageModel());\n  }\n\n  @override\n  void dispose() {\n    _model.dispose();\n\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (isiOS) {\n      SystemChrome.setSystemUIOverlayStyle(\n        SystemUiOverlayStyle(\n          statusBarBrightness: Theme.of(context).brightness,\n          systemStatusBarContrastEnforced: true,\n        ),\n      );\n    }\n\n    context.watch<FFAppState>();\n\n    return GestureDetector(\n      onTap: () => _model.unfocusNode.canRequestFocus\n          ? FocusScope.of(context).requestFocus(_model.unfocusNode)\n          : FocusScope.of(context).unfocus(),\n      child: Scaffold(\n        key: scaffoldKey,\n        resizeToAvoidBottomInset: false,\n        backgroundColor: FlutterFlowTheme.of(context).info,\n        drawer: SizedBox(\n          width: 300.0,\n          child: Drawer(\n            elevation: 16.0,\n            child: wrapWithModel(\n              model: _model.sideMenuComponentModel1,\n              updateCallback: () => setState(() {}),\n              child: const SideMenuComponentWidget(),\n            ),\n          ),\n        ),\n        endDrawer: SizedBox(\n          width: 300.0,\n          child: Drawer(\n            elevation: 16.0,\n            child: wrapWithModel(\n              model: _model.sideMenuComponentModel2,\n              updateCallback: () => setState(() {}),\n              child: const SideMenuComponentWidget(),\n            ),\n          ),\n        ),\n        body: SafeArea(\n          top: true,\n          child: Visibility(\n            visible: responsiveVisibility(\n              context: context,\n              tabletLandscape: false,\n            ),\n            child: Stack(\n              children: [\n                SizedBox(\n                  width: double.infinity,\n                  height: double.infinity,\n                  child: custom_widgets.MapCustomWidget(\n                    width: double.infinity,\n                    height: double.infinity,\n                    locationRequstedAction: () async {\n                      if (FFAppState().UseTrackToBiginApiAppState == true) {\n                        _model.apiResultr6q =\n                            await AddBusTrackToBeginLiveLocationApiCall.call(\n                          token: FFAppState().UserModelAppState.token,\n                          lat: FFAppState().locationAppState.lat.toString(),\n                          lng: FFAppState().locationAppState.lng.toString(),\n                          busId: getJsonField(\n                            FFAppState().travilLine,\n                            r'''$._id''',\n                          ).toString(),\n                        );\n                        if ((_model.apiResultr6q?.succeeded ?? true)) {\n                          setState(() {});\n                        }\n                      } else {\n                        _model.apiResult0b0 = await LiveLocationApiCall.call(\n                          token: FFAppState().UserModelAppState.token,\n                          busNumber: FFAppState().UserModelAppState.ssi,\n                          lat: FFAppState().locationAppState.lat,\n                          lng: FFAppState().locationAppState.lng,\n                          userName: FFAppState().UserModelAppState.name,\n                          user: FFAppState().UserModelAppState.id,\n                          status: 'e',\n                          confidence: 0,\n                          batteryLevel: 0,\n                          batteryCharging: true,\n                          accuracy: 0,\n                          altitude: 0,\n                          altitudeAccuracy: 0,\n                          isMoving: true,\n                          time: getCurrentTimestamp.millisecondsSinceEpoch,\n                          deviceId: '0',\n                          speed: 90,\n                          heading: 0,\n                          movingType: 'e',\n                          event: 'e',\n                          phonrModel: 'x7',\n                          platform: 'android',\n                          university: FFAppState().UserModelAppState.university,\n                          bus: getJsonField(\n                            FFAppState().travilLine,\n                            r'''$._id''',\n                          ).toString(),\n                        );\n                        if ((_model.apiResult0b0?.succeeded ?? true)) {\n                          setState(() {});\n                        }\n                      }\n\n                      setState(() {});\n                    },\n                    startTrip: () async {\n                      _model.apiResultf61 = await StartTripApiCall.call(\n                        token: FFAppState().UserModelAppState.token,\n                        travelId: getJsonField(\n                          FFAppState().travilLine,\n                          r'''$.data._id''',\n                        ).toString(),\n                        driverId: FFAppState().UserModelAppState.id,\n                        day: functions.dateFromat(),\n                        isFinished: false,\n                        busId: getJsonField(\n                          functions.findBusByUserId(\n                              getJsonField(\n                                FFAppState().travilLine,\n                                r'''$.bus''',\n                                true,\n                              )!,\n                              FFAppState().UserModelAppState.id),\n                          r'''$._id''',\n                        ).toString(),\n                      );\n                      if ((_model.apiResultf61?.succeeded ?? true)) {\n                        setState(() {});\n                      }\n\n                      setState(() {});\n                    },\n                    stopTrip: () async {},\n                    travilLise: () async {\n                      await showDialog(\n                        context: context,\n                        builder: (alertDialogContext) {\n                          return AlertDialog(\n                            title: Text(\n                                FFLocalizations.of(context).getVariableText(\n                              enText: 'Alert',\n                              arText: 'تنبيه',\n                            )),\n                            content: Text(\n                                FFLocalizations.of(context).getVariableText(\n                              enText: 'You must choose a route for the trip',\n                              arText: 'يتعين عليك اختيار مسار للرحلة',\n                            )),\n                            actions: [\n                              TextButton(\n                                onPressed: () =>\n                                    Navigator.pop(alertDialogContext),\n                                child: Text(\n                                    FFLocalizations.of(context).getVariableText(\n                                  enText: 'Ok',\n                                  arText: 'حسنا',\n                                )),\n                              ),\n                            ],\n                          );\n                        },\n                      );\n                    },\n                  ),\n                ),\n                Column(\n                  mainAxisSize: MainAxisSize.max,\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: [\n                    Column(\n                      mainAxisSize: MainAxisSize.max,\n                      children: [\n                        Padding(\n                          padding: const EdgeInsetsDirectional.fromSTEB(\n                              10.0, 0.0, 10.0, 0.0),\n                          child: Row(\n                            mainAxisSize: MainAxisSize.max,\n                            mainAxisAlignment: MainAxisAlignment.start,\n                            children: [\n                              Container(\n                                width: 45.0,\n                                height: 45.0,\n                                decoration: const BoxDecoration(\n                                  color: Color(0xFF347CE2),\n                                  shape: BoxShape.circle,\n                                ),\n                                child: InkWell(\n                                  splashColor: Colors.transparent,\n                                  focusColor: Colors.transparent,\n                                  hoverColor: Colors.transparent,\n                                  highlightColor: Colors.transparent,\n                                  onTap: () async {\n                                    scaffoldKey.currentState!.openDrawer();\n                                  },\n                                  child: Icon(\n                                    Icons.reorder_sharp,\n                                    color: FlutterFlowTheme.of(context).info,\n                                    size: 30.0,\n                                  ),\n                                ),\n                              ),\n                            ],\n                          ),\n                        ),\n                      ],\n                    ),\n                    Column(\n                      mainAxisSize: MainAxisSize.max,\n                      children: [\n                        Row(\n                          mainAxisSize: MainAxisSize.max,\n                          children: [\n                            Expanded(\n                              child: Container(\n                                decoration: const BoxDecoration(\n                                  color: Color(0xAE2F19FC),\n                                ),\n                                child: Padding(\n                                  padding: const EdgeInsetsDirectional.fromSTEB(\n                                      15.0, 0.0, 15.0, 0.0),\n                                  child: Row(\n                                    mainAxisSize: MainAxisSize.max,\n                                    mainAxisAlignment:\n                                        MainAxisAlignment.spaceBetween,\n                                    children: [\n                                      Text(\n                                        FFLocalizations.of(context).getText(\n                                          'tdr2806z' /* You Have To Select Trip */,\n                                        ),\n                                        style: FlutterFlowTheme.of(context)\n                                            .bodyMedium\n                                            .override(\n                                              fontFamily: 'Readex Pro',\n                                              color:\n                                                  FlutterFlowTheme.of(context)\n                                                      .info,\n                                            ),\n                                      ),\n                                      Builder(\n                                        builder: (context) => Padding(\n                                          padding:\n                                              const EdgeInsetsDirectional.fromSTEB(\n                                                  0.0, 10.0, 0.0, 10.0),\n                                          child: FFButtonWidget(\n                                            onPressed: () async {\n                                              await showAlignedDialog(\n                                                context: context,\n                                                isGlobal: true,\n                                                avoidOverflow: false,\n                                                targetAnchor:\n                                                    const AlignmentDirectional(\n                                                            0.0, 0.0)\n                                                        .resolve(\n                                                            Directionality.of(\n                                                                context)),\n                                                followerAnchor:\n                                                    const AlignmentDirectional(\n                                                            0.0, 0.0)\n                                                        .resolve(\n                                                            Directionality.of(\n                                                                context)),\n                                                builder: (dialogContext) {\n                                                  return Material(\n                                                    color: Colors.transparent,\n                                                    child: GestureDetector(\n                                                      onTap: () => _model\n                                                              .unfocusNode\n                                                              .canRequestFocus\n                                                          ? FocusScope.of(\n                                                                  context)\n                                                              .requestFocus(_model\n                                                                  .unfocusNode)\n                                                          : FocusScope.of(\n                                                                  context)\n                                                              .unfocus(),\n                                                      child:\n                                                          const TravelListComponentWidget(),\n                                                    ),\n                                                  );\n                                                },\n                                              ).then(\n                                                  (value) => setState(() {}));\n                                            },\n                                            text: FFLocalizations.of(context)\n                                                .getText(\n                                              'vp2rc41u' /* Trip */,\n                                            ),\n                                            options: FFButtonOptions(\n                                              height: 40.0,\n                                              padding: const EdgeInsetsDirectional\n                                                  .fromSTEB(\n                                                      34.0, 0.0, 34.0, 0.0),\n                                              iconPadding: const EdgeInsetsDirectional\n                                                  .fromSTEB(0.0, 0.0, 0.0, 0.0),\n                                              color:\n                                                  FlutterFlowTheme.of(context)\n                                                      .info,\n                                              textStyle: FlutterFlowTheme.of(\n                                                      context)\n                                                  .titleSmall\n                                                  .override(\n                                                    fontFamily: 'Readex Pro',\n                                                    color: const Color(0xAE2F19FC),\n                                                  ),\n                                              elevation: 3.0,\n                                              borderSide: const BorderSide(\n                                                color: Colors.transparent,\n                                                width: 1.0,\n                                              ),\n                                              borderRadius:\n                                                  BorderRadius.circular(8.0),\n                                            ),\n                                          ),\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                ),\n                              ),\n                            ),\n                          ],\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n                Container(\n                  width: 0.0,\n                  height: 0.0,\n                  decoration: const BoxDecoration(),\n                  child: FlutterFlowGoogleMap(\n                    controller: _model.googleMapsController,\n                    onCameraIdle: (latLng) => _model.googleMapsCenter = latLng,\n                    initialLocation: _model.googleMapsCenter ??=\n                        const LatLng(13.106061, -59.613158),\n                    markerColor: GoogleMarkerColor.violet,\n                    mapType: MapType.normal,\n                    style: GoogleMapStyle.standard,\n                    initialZoom: 14.0,\n                    allowInteraction: true,\n                    allowZoom: true,\n                    showZoomControls: true,\n                    showLocation: true,\n                    showCompass: false,\n                    showMapToolbar: false,\n                    showTraffic: false,\n                    centerMapOnMarkerTap: true,\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/tracking_page/tracking_page_widget.dart b/lib/pages/tracking_page/tracking_page_widget.dart
--- a/lib/pages/tracking_page/tracking_page_widget.dart	(revision 8b1e0ebc5136d231b2293e701f28b6a193ae8788)
+++ b/lib/pages/tracking_page/tracking_page_widget.dart	(date 1702588983156)
@@ -1,3 +1,5 @@
+import 'package:tracllo_driver_system/pages/tracking_page/track_map_custom_widget.dart';
+
 import '/backend/api_requests/api_calls.dart';
 import '/flutter_flow/flutter_flow_google_map.dart';
 import '/flutter_flow/flutter_flow_theme.dart';
@@ -94,7 +96,7 @@
                 SizedBox(
                   width: double.infinity,
                   height: double.infinity,
-                  child: custom_widgets.MapCustomWidget(
+                  child: TrackMapCustomWidget(
                     width: double.infinity,
                     height: double.infinity,
                     locationRequstedAction: () async {
Index: android/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>buildscript {\n    ext.kotlin_version = '1.7.10'\n    repositories {\n        google()\n        mavenCentral()\n    }\n\n    dependencies {\n        classpath 'com.android.tools.build:gradle:7.3.0'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        \n        \n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n    }\n}\n\nrootProject.buildDir = '../build'\nsubprojects {\n    project.buildDir = \"${rootProject.buildDir}/${project.name}\"\n}\nsubprojects {\n    project.evaluationDependsOn(':app')\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/build.gradle b/android/build.gradle
--- a/android/build.gradle	(revision 8b1e0ebc5136d231b2293e701f28b6a193ae8788)
+++ b/android/build.gradle	(date 1702588983158)
@@ -28,6 +28,6 @@
     project.evaluationDependsOn(':app')
 }
 
-task clean(type: Delete) {
+tasks.register("clean", Delete) {
     delete rootProject.buildDir
 }
Index: lib/pages/counter_information_dialog/counter_information_dialog_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import '/backend/api_requests/api_calls.dart';\nimport '/flutter_flow/flutter_flow_theme.dart';\nimport '/flutter_flow/flutter_flow_util.dart';\nimport '/flutter_flow/flutter_flow_widgets.dart';\nimport '/flutter_flow/upload_data.dart';\nimport 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\nimport 'counter_information_dialog_model.dart';\nexport 'counter_information_dialog_model.dart';\n\nclass CounterInformationDialogWidget extends StatefulWidget {\n  const CounterInformationDialogWidget({super.key});\n\n  @override\n  _CounterInformationDialogWidgetState createState() =>\n      _CounterInformationDialogWidgetState();\n}\n\nclass _CounterInformationDialogWidgetState\n    extends State<CounterInformationDialogWidget> {\n  late CounterInformationDialogModel _model;\n\n  @override\n  void setState(VoidCallback callback) {\n    super.setState(callback);\n    _model.onUpdate();\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _model = createModel(context, () => CounterInformationDialogModel());\n\n    _model.textController ??= TextEditingController();\n    _model.textFieldFocusNode ??= FocusNode();\n  }\n\n  @override\n  void dispose() {\n    _model.maybeDispose();\n\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    context.watch<FFAppState>();\n\n    return Visibility(\n      visible: responsiveVisibility(\n        context: context,\n        tabletLandscape: false,\n      ),\n      child: Padding(\n        padding: const EdgeInsets.all(30.0),\n        child: Container(\n          height: 400.0,\n          decoration: BoxDecoration(\n            color: FlutterFlowTheme.of(context).info,\n            borderRadius: BorderRadius.circular(8.0),\n          ),\n          child: Column(\n            mainAxisSize: MainAxisSize.max,\n            mainAxisAlignment: MainAxisAlignment.start,\n            children: [\n              Row(\n                mainAxisSize: MainAxisSize.max,\n                mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                children: [\n                  Expanded(\n                    child: Container(\n                      decoration: const BoxDecoration(\n                        color: Color(0xAE2F19FC),\n                        borderRadius: BorderRadius.only(\n                          bottomLeft: Radius.circular(0.0),\n                          bottomRight: Radius.circular(0.0),\n                          topLeft: Radius.circular(8.0),\n                          topRight: Radius.circular(8.0),\n                        ),\n                      ),\n                      child: Padding(\n                        padding: const EdgeInsetsDirectional.fromSTEB(\n                            15.0, 0.0, 15.0, 0.0),\n                        child: Row(\n                          mainAxisSize: MainAxisSize.max,\n                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                          children: [\n                            Padding(\n                              padding: const EdgeInsetsDirectional.fromSTEB(\n                                  0.0, 10.0, 0.0, 10.0),\n                              child: FFButtonWidget(\n                                onPressed: () async {\n                                  _model.apiResultdxj =\n                                      await DriverDailyImageSummaryApiCall.call(\n                                    token: FFAppState().UserModelAppState.token,\n                                  );\n                                  if ((_model.apiResultdxj?.succeeded ??\n                                      true)) {\n                                    setState(() {});\n                                  }\n\n                                  setState(() {});\n                                },\n                                text: FFLocalizations.of(context).getText(\n                                  '1u7fvsxk' /* Save */,\n                                ),\n                                options: FFButtonOptions(\n                                  height: 40.0,\n                                  padding: const EdgeInsetsDirectional.fromSTEB(\n                                      34.0, 0.0, 34.0, 0.0),\n                                  iconPadding: const EdgeInsetsDirectional.fromSTEB(\n                                      0.0, 0.0, 0.0, 0.0),\n                                  color: FlutterFlowTheme.of(context).info,\n                                  textStyle: FlutterFlowTheme.of(context)\n                                      .titleSmall\n                                      .override(\n                                        fontFamily: 'Readex Pro',\n                                        color: const Color(0xAE2F19FC),\n                                      ),\n                                  elevation: 3.0,\n                                  borderSide: const BorderSide(\n                                    color: Colors.transparent,\n                                    width: 1.0,\n                                  ),\n                                  borderRadius: BorderRadius.circular(8.0),\n                                ),\n                              ),\n                            ),\n                            Text(\n                              FFLocalizations.of(context).getText(\n                                'g0c3407i' /* Counter Information */,\n                              ),\n                              style: FlutterFlowTheme.of(context)\n                                  .bodyMedium\n                                  .override(\n                                    fontFamily: 'Readex Pro',\n                                    color: FlutterFlowTheme.of(context).info,\n                                    fontSize: 14.0,\n                                  ),\n                            ),\n                            InkWell(\n                              splashColor: Colors.transparent,\n                              focusColor: Colors.transparent,\n                              hoverColor: Colors.transparent,\n                              highlightColor: Colors.transparent,\n                              onTap: () async {\n                                Navigator.pop(context);\n                              },\n                              child: Icon(\n                                Icons.close_sharp,\n                                color: FlutterFlowTheme.of(context).info,\n                                size: 35.0,\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              Expanded(\n                child: Column(\n                  mainAxisSize: MainAxisSize.max,\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: [\n                    Column(\n                      mainAxisSize: MainAxisSize.max,\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Container(\n                          decoration: const BoxDecoration(),\n                          child: Padding(\n                            padding: const EdgeInsets.all(15.0),\n                            child: TextFormField(\n                              controller: _model.textController,\n                              focusNode: _model.textFieldFocusNode,\n                              autofocus: true,\n                              obscureText: false,\n                              decoration: InputDecoration(\n                                labelText: FFLocalizations.of(context).getText(\n                                  '2wwujjvs' /* Current Counter Information Nu... */,\n                                ),\n                                labelStyle:\n                                    FlutterFlowTheme.of(context).labelMedium,\n                                hintStyle:\n                                    FlutterFlowTheme.of(context).labelMedium,\n                                enabledBorder: OutlineInputBorder(\n                                  borderSide: const BorderSide(\n                                    color: Color(0xFF032734),\n                                    width: 1.0,\n                                  ),\n                                  borderRadius: BorderRadius.circular(10.0),\n                                ),\n                                focusedBorder: OutlineInputBorder(\n                                  borderSide: BorderSide(\n                                    color: FlutterFlowTheme.of(context).primary,\n                                    width: 1.0,\n                                  ),\n                                  borderRadius: BorderRadius.circular(10.0),\n                                ),\n                                errorBorder: OutlineInputBorder(\n                                  borderSide: BorderSide(\n                                    color: FlutterFlowTheme.of(context).error,\n                                    width: 1.0,\n                                  ),\n                                  borderRadius: BorderRadius.circular(10.0),\n                                ),\n                                focusedErrorBorder: OutlineInputBorder(\n                                  borderSide: BorderSide(\n                                    color: FlutterFlowTheme.of(context).error,\n                                    width: 1.0,\n                                  ),\n                                  borderRadius: BorderRadius.circular(10.0),\n                                ),\n                              ),\n                              style: FlutterFlowTheme.of(context).bodyMedium,\n                              textAlign: TextAlign.start,\n                              keyboardType: TextInputType.number,\n                              validator: _model.textControllerValidator\n                                  .asValidator(context),\n                            ),\n                          ),\n                        ),\n                      ],\n                    ),\n                    Padding(\n                      padding:\n                          const EdgeInsetsDirectional.fromSTEB(15.0, 0.0, 15.0, 0.0),\n                      child: InkWell(\n                        splashColor: Colors.transparent,\n                        focusColor: Colors.transparent,\n                        hoverColor: Colors.transparent,\n                        highlightColor: Colors.transparent,\n                        onTap: () async {\n                          if (_model.isUploaded == false) {\n                            final selectedMedia = await selectMedia(\n                              multiImage: false,\n                            );\n                            if (selectedMedia != null &&\n                                selectedMedia.every((m) => validateFileFormat(\n                                    m.storagePath, context))) {\n                              setState(() => _model.isDataUploading = true);\n                              var selectedUploadedFiles = <FFUploadedFile>[];\n\n                              try {\n                                selectedUploadedFiles = selectedMedia\n                                    .map((m) => FFUploadedFile(\n                                          name: m.storagePath.split('/').last,\n                                          bytes: m.bytes,\n                                          height: m.dimensions?.height,\n                                          width: m.dimensions?.width,\n                                          blurHash: m.blurHash,\n                                        ))\n                                    .toList();\n                              } finally {\n                                _model.isDataUploading = false;\n                              }\n                              if (selectedUploadedFiles.length ==\n                                  selectedMedia.length) {\n                                setState(() {\n                                  _model.uploadedLocalFile =\n                                      selectedUploadedFiles.first;\n                                });\n                              } else {\n                                setState(() {});\n                                return;\n                              }\n                            }\n\n                            setState(() {\n                              _model.localUploadedImage =\n                                  _model.uploadedLocalFile;\n                              _model.isUploaded = true;\n                            });\n                            setState(() {\n                              _model.localImageBase46 = '';\n                            });\n                          }\n                        },\n                        child: Container(\n                          decoration: BoxDecoration(\n                            color: FlutterFlowTheme.of(context)\n                                .secondaryBackground,\n                            borderRadius: BorderRadius.circular(8.0),\n                            border: Border.all(\n                              color: const Color(0xFF032734),\n                              width: 1.0,\n                            ),\n                          ),\n                          child: Padding(\n                            padding: const EdgeInsets.all(10.0),\n                            child: Column(\n                              mainAxisSize: MainAxisSize.max,\n                              children: [\n                                Padding(\n                                  padding: const EdgeInsetsDirectional.fromSTEB(\n                                      0.0, 10.0, 0.0, 0.0),\n                                  child: Text(\n                                    FFLocalizations.of(context).getText(\n                                      'av4kc783' /* Uploade Counter Image */,\n                                    ),\n                                    style: FlutterFlowTheme.of(context)\n                                        .bodyMedium\n                                        .override(\n                                          fontFamily: 'Roboto',\n                                          color: FlutterFlowTheme.of(context)\n                                              .secondaryText,\n                                          fontSize: 18.0,\n                                          fontWeight: FontWeight.normal,\n                                        ),\n                                  ),\n                                ),\n                                Stack(\n                                  children: [\n                                    if (_model.isUploaded == false)\n                                      Padding(\n                                        padding: const EdgeInsetsDirectional.fromSTEB(\n                                            0.0, 20.0, 0.0, 0.0),\n                                        child: Icon(\n                                          Icons.upload_file_sharp,\n                                          color: FlutterFlowTheme.of(context)\n                                              .secondaryText,\n                                          size: 50.0,\n                                        ),\n                                      ),\n                                    if (_model.isUploaded == true)\n                                      const Padding(\n                                        padding: EdgeInsetsDirectional.fromSTEB(\n                                            0.0, 20.0, 0.0, 0.0),\n                                        child: Icon(\n                                          Icons.task_outlined,\n                                          color: Color(0xFF3AD04B),\n                                          size: 50.0,\n                                        ),\n                                      ),\n                                  ],\n                                ),\n                              ],\n                            ),\n                          ),\n                        ),\n                      ),\n                    ),\n                    const Column(\n                      mainAxisSize: MainAxisSize.max,\n                      children: [],\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/counter_information_dialog/counter_information_dialog_widget.dart b/lib/pages/counter_information_dialog/counter_information_dialog_widget.dart
--- a/lib/pages/counter_information_dialog/counter_information_dialog_widget.dart	(revision 8b1e0ebc5136d231b2293e701f28b6a193ae8788)
+++ b/lib/pages/counter_information_dialog/counter_information_dialog_widget.dart	(date 1702589667061)
@@ -1,3 +1,5 @@
+import 'dart:convert';
+
 import '/backend/api_requests/api_calls.dart';
 import '/flutter_flow/flutter_flow_theme.dart';
 import '/flutter_flow/flutter_flow_util.dart';
@@ -93,6 +95,17 @@
                                   _model.apiResultdxj =
                                       await DriverDailyImageSummaryApiCall.call(
                                     token: FFAppState().UserModelAppState.token,
+                                    speedometer: int.tryParse(
+                                        _model.textController.text),
+                                    speedometerImg: _model.localImageBase46,
+                                    lat: FFAppState()
+                                        .locationAppState
+                                        .lat
+                                        .toString(),
+                                    lng: FFAppState()
+                                        .locationAppState
+                                        .lng
+                                        .toString(),
                                   );
                                   if ((_model.apiResultdxj?.succeeded ??
                                       true)) {
@@ -108,8 +121,9 @@
                                   height: 40.0,
                                   padding: const EdgeInsetsDirectional.fromSTEB(
                                       34.0, 0.0, 34.0, 0.0),
-                                  iconPadding: const EdgeInsetsDirectional.fromSTEB(
-                                      0.0, 0.0, 0.0, 0.0),
+                                  iconPadding:
+                                      const EdgeInsetsDirectional.fromSTEB(
+                                          0.0, 0.0, 0.0, 0.0),
                                   color: FlutterFlowTheme.of(context).info,
                                   textStyle: FlutterFlowTheme.of(context)
                                       .titleSmall
@@ -225,8 +239,8 @@
                       ],
                     ),
                     Padding(
-                      padding:
-                          const EdgeInsetsDirectional.fromSTEB(15.0, 0.0, 15.0, 0.0),
+                      padding: const EdgeInsetsDirectional.fromSTEB(
+                          15.0, 0.0, 15.0, 0.0),
                       child: InkWell(
                         splashColor: Colors.transparent,
                         focusColor: Colors.transparent,
@@ -267,14 +281,15 @@
                                 return;
                               }
                             }
-
                             setState(() {
                               _model.localUploadedImage =
                                   _model.uploadedLocalFile;
                               _model.isUploaded = true;
                             });
                             setState(() {
-                              _model.localImageBase46 = '';
+                              _model.localImageBase46 =
+                                  convertFromImagePathToString(
+                                      _model.uploadedLocalFile);
                             });
                           }
                         },
@@ -315,8 +330,8 @@
                                   children: [
                                     if (_model.isUploaded == false)
                                       Padding(
-                                        padding: const EdgeInsetsDirectional.fromSTEB(
-                                            0.0, 20.0, 0.0, 0.0),
+                                        padding: const EdgeInsetsDirectional
+                                            .fromSTEB(0.0, 20.0, 0.0, 0.0),
                                         child: Icon(
                                           Icons.upload_file_sharp,
                                           color: FlutterFlowTheme.of(context)
@@ -355,4 +370,14 @@
       ),
     );
   }
+
+  String convertFromImagePathToString(FFUploadedFile imageFile) {
+    /// MODIFY CODE ONLY BELOW THIS LINE
+
+    String base64String = base64Encode(imageFile.bytes ?? []);
+    String header = "data:image/png;base64,";
+    return header + base64String;
+
+    /// MODIFY CODE ONLY ABOVE THIS LINE
+  }
 }
